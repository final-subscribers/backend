import org.liquibase.gradle.LiquibaseTask

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.liquibase:liquibase-core:4.26.0'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'com.diffplug.spotless' version '6.11.0'
    id "it.nicolasfarabegoli.conventional-commits" version "3.1.3" // 커밋 컨벤션 강제 플러그인
    id 'org.liquibase.gradle' version '3.0.0'
}

group = 'subscribers'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation:3.1.1'
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation 'io.swagger.core.v3:swagger-annotations:2.2.20'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    implementation 'org.projectlombok:lombok'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation "org.testcontainers:testcontainers:1.17.3"
    testImplementation "org.testcontainers:junit-jupiter:1.17.3"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'

    // redis
    implementation 'org.redisson:redisson-spring-boot-starter:3.31.0'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // s3(r2)
    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.691'

    // coolsms
    implementation 'net.nurigo:sdk:4.3.0'

    // liquibase
    liquibaseRuntime 'org.liquibase:liquibase-core:4.26.0'
    liquibaseRuntime 'org.liquibase:liquibase-groovy-dsl:3.0.2'
    liquibaseRuntime 'info.picocli:picocli:4.6.1'
    liquibaseRuntime 'mysql:mysql-connector-java:8.0.28'
    liquibaseRuntime group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'
    liquibaseRuntime('ch.qos.logback:logback-core:1.4.14')
    liquibaseRuntime('ch.qos.logback:logback-classic:1.4.12')
    liquibaseRuntime 'org.liquibase.ext:liquibase-hibernate5:3.6'
    liquibaseRuntime sourceSets.main.output

    // Querydsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

    // p6spy
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'
}

tasks.named('test') {
    useJUnitPlatform()
}

bootJar {
    archiveFileName = 'subscribers.jar'
}

def db_url = project.findProperty("DB_URL") ?: ""
def db_username= project.findProperty("DB_USERNAME") ?: ""
def db_password= project.findProperty("DB_PASSWORD") ?: ""
def db_driver = project.findProperty("DB_DRIVER") ?: ""
def reference_url= project.findProperty("REFERENCE_URL") ?: ""
def reference_username = project.findProperty("REFERENCE_USERNAME") ?: ""
def reference_password = project.findProperty("REFERENCE_PASSWORD") ?: ""

liquibase {
    def changeLogName = getChangeLogFileName()
    activities {
        mainActivity {
            url "${db_url}"
            username "${db_username}"
            password "${db_password}"
            changelogFile changeLogName
            classpath 'src/main/java'
        }
        runList = 'mainActivity'
    }
}


tasks.named('diffChangelog', LiquibaseTask) {
    dependsOn 'compileJava'

    doFirst {
        liquibase {
            activities {
                mainActivity {
                    url "${db_url}"
                    username "${db_username}"
                    password "${db_password}"
                    changelogFile 'src/main/resources/liquibase/migrations/diff-changelog.yaml'
                    classpath 'src/main/java'
                    referenceUrl "${reference_url}"
                    referenceUsername "${reference_username}"
                    referencePassword "${reference_password}"
                }
            }
            runList = 'mainActivity'
        }
    }
}

static def getChangeLogFileName() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmmss')
    return 'src/main/resources/liquibase/migrations/' + formattedDate + '-changelog.yaml'
}

clean {	delete file('src/main/generated')}

// git hook 설정
spotless {
    java {
        target("src/main/java/**/*.java","src/test/java/**/*.java")
        googleJavaFormat().aosp()
        importOrder()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
        formatAnnotations()
    }
}
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs += '-parameters'
}
tasks.register('updateGitHooks', Copy) {
    from('./scripts/pre-commit') {
        rename 'pre-commit', 'pre-commit'
    }
    into('.git/hooks')
    fileMode 0775

    doFirst {
        file('.git/hooks').mkdirs()
    }
}
compileJava.dependsOn updateGitHooks